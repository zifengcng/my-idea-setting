<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="318" />
    <option name="newTranslationDialogX" value="1035" />
    <option name="newTranslationDialogY" value="353" />
    <histories>
      <item value="tree" />
      <item value="234" />
      <item value="11" />
      <item value="Vague" />
      <item value="get Dimension Vague" />
      <item value="不满足公式" />
      <item value="条件" />
      <item value="b" />
      <item value="formula" />
      <item value="time" />
      <item value="倍" />
      <item value="几倍" />
      <item value="倍数" />
      <item value="be" />
      <item value="异常" />
      <item value="Outlier" />
      <item value="异常点" />
      <item value="连续" />
      <item value="优先级" />
      <item value="Descriptor" />
      <item value="ceiling" />
      <item value="invoke" />
      <item value="函数" />
      <item value="TP" />
      <item value="变量" />
      <item value="参数" />
      <item value="get Rule Param List" />
      <item value="时间进度" />
      <item value="sequential" />
      <item value="匹配" />
      <item value="pei'pei" />
      <item value="comments" />
      <item value="escape" />
      <item value="esca" />
      <item value="es" />
      <item value="redundant" />
      <item value="redundat" />
      <item value="red" />
      <item value="single" />
      <item value="singleton" />
      <item value="单个的" />
      <item value="单个" />
      <item value="单身的" />
      <item value="operation" />
      <item value="operational" />
      <item value="操作" />
      <item value="c" />
      <item value="算术表达式" />
      <item value="OPERATION" />
      <item value="OPERATEION" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1221" />
        <entry key="ENGLISH" value="1211" />
        <entry key="AZERBAIJANI" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LITHUANIAN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1694509533163" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1712458770205" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="294" />
    <option name="newTranslationDialogX" value="664" />
    <option name="newTranslationDialogY" value="438" />
    <histories>
      <item value="括号" />
      <item value="左括号" />
      <item value="Returns a {@link Collection} containing the union of the given {@link Iterable}s. &lt;p&gt; The cardinality of each element in the returned {@link Collection} will be equal to the maximum of the cardinality of that element in the two given {@link Iterable}s. &lt;p&gt; @param a the first collection, must not be null @param b the second collection, must not be null @param &lt;O&gt; the generic type that is able to represent the types contained in both input collections. @return the union of the two collections @see CollectionaddAll public static &lt;O&gt; Collection&lt;O&gt; union(final" />
      <item value="运算符" />
      <item value="操作符" />
      <item value="解析" />
      <item value="ji" />
      <item value="Instantiation Exception" />
      <item value="Track" />
      <item value="追踪维度" />
      <item value="追踪" />
      <item value="z" />
      <item value="遍历" />
      <item value="后缀" />
      <item value="aggre" />
      <item value="cooper" />
      <item value="cookper" />
      <item value="cook" />
      <item value="coo" />
      <item value="cooke" />
      <item value="c" />
      <item value="分析" />
      <item value="Control" />
      <item value="ControlInt" />
      <item value="Evaluation Context" />
      <item value="Evaluation" />
      <item value="evaluation" />
      <item value="Evaluate" />
      <item value="datum" />
      <item value="the length of time to sleep in milliseconds" />
      <item value="millis" />
      <item value="Index column size too large" />
      <item value="Prevents calls to {@link finish} from freeing the cache" />
      <item value="DB CLOSE DELAY" />
      <item value="delimiter" />
      <item value="pruning" />
      <item value="剪枝" />
      <item value="backtrack" />
      <item value="pilot" />
      <item value="策略" />
      <item value="Reverses the order of the elements in the specified list" />
      <item value="无效" />
      <item value="w" />
      <item value="enable" />
      <item value="e" />
      <item value="不可用" />
      <item value="b" />
      <item value="Checks if a new worker can be added with respect to current pool state and the given bound (either core or maximum). If so, the worker count is adjusted accordingly, and, if possible, a new worker is created and started, running firstTask as its first task. This method returns false if the pool is stopped or eligible to shut down. It also returns false if the thread factory fails to create a thread when asked. If the thread creation fails, either due to the thread factory returning null, or due to an exception (typically OutOfMemoryError in Thread.start()), we roll back cleanly. @param firstTask the task the new thread should run first (or null if none). Workers are created with an initial first task (in method execute()) to bypass queuing when there are fewer than corePoolSize threads (in which case we always start one), or when the queue is full (in which case we must bypass queue). Initially idle threads are usually created via prestartCoreThread or to replace other dying workers. @param core if true use corePoolSize as bound, else maximumPoolSize. (A boolean indicator is used here rather than a value to ensure reads of fresh values after checking other pool state). @return true if successful" />
      <item value="Executes the given task sometime in the future. The task may execute in a new thread or in an existing pooled thread. If the task cannot be submitted for execution, either because this executor has been shutdown or because its capacity has been reached, the task is handled by the current {@code RejectedExecutionHandler}. @param command the task to execute @throws RejectedExecutionException at discretion of {@code RejectedExecutionHandler}, if the task cannot be accepted for execution @throws NullPointerException if {@code command} is null" />
      <item value="Always throws RejectedExecutionException. Params: r – the runnable task requested to be executed e – the executor attempting to execute this task" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="584" />
        <entry key="ENGLISH" value="584" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="UZBEK" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>